-- O DUPLO SINAL DE MENOS COMENTA TODA A LINHA A PARTIR DO MESMO

/* E */ /*  -- COMENTA DIVERSAS LINHA, OU SEJA UM BLOCO

DUAS FORMAS DE EXECU��O DAS QUERIES:
1) COMO INSTRU��O - GERAR UM RESULTADO EM FORMA DE TABELA
2) COMO SCRIPT - GERAR RESULTADO EM TEXTO
*/

SELECT *  -- * EST� INDICANDO QUE A QUERY IR� TRAZER TODAS AS COLUNAS DA TABELA
FROM EMPX; -- TODA QUERY TERMINA COM PONTO-V�RGULA

SELECT FIRST_NAME
FROM EMP;

/*
SELECT -- PROJETA AS COLUNAS DESEJADAS EXISTENTES NA ORIGEM FROM, SEPARADAS POR V�RGULA 
FROM -- RELACIONA A ORIGEM ONDE EST�O OS DADOS A SEREM CONSULTADOS
WHERE -- FAZ A RESTRI��O (FILTRO) DAS LINHAS A SEREM MOSTRADAS CONFORME UMA CONDI��O
      -- OPERADORES PARA DEFINIR UMA CONDI��O: =, <> (!=), >=, <=, <, >, NOT, AND, OR
      --                                       BETWEEN, LIKE, IN
GROUP BY -- ESTABELECER SUBGRUPOS NO RESULTADO DA QUERY
HAVING -- FAZ A RESTRI��O (FILTRO) OS SUBGRUPOS FORMADOS CONFORME UMA CONDI��O
ORDER BY -- ORDENAR O RESULTADO APRESENTADO, ASCENDENTE OU DESCENDENTE POR COLUNAS
*/

-- PRODUZINDO REESULTADOS CONSTANTES
SELECT ROUND(1234234234234 / 3452345324,2) AS CALC1,
       TO_CHAR(SYSDATE,'YYYY-DD-MM') "DATA HOJE",
       'Teste'  AS STRING,
       5 AS NUMERO
FROM DUAL;  -- DUAL � UM OBJETO VIRTUAL EQUIVALENTE A UMA TABELA SEM COLUNAS NO BD

-- OBTENDO VALORES CONSTANTES A PARTIR DE UMA TABELA COM DADOS NO BD
SELECT ROUND(1234234234234 / 3452345324,2) AS CALC1,
       TO_CHAR(SYSDATE,'YYYY-DD-MM') "DATA HOJE",
       'Teste'  AS STRING,
       5 AS NUMERO,
       FIRST_NAME PRIMEIRO_NOME
FROM EMP;

-- VERIFICANDO E ANALISANDO METADADOS NO DICION�RIO DE DADOS DIN�MICO (CAT�LOGO)
DESC ALL_OBJECTS; -- DESC DESCREVE A ESTRUTURA DE UMA TABELA OU VIEW

-- SELECIONANDO OS DADOS DA VIEW ALL_OBJECTS
SELECT *
FROM ALL_OBJECTS;

SELECT COUNT(*) -- CONTANDO A QUANTIDADE DE OBJETOS QUE O USU�IO LOGADO PODE VER
FROM ALL_OBJECTS;

SHOW USER;

SELECT DISTINCT OBJECT_TYPE  -- VERIFICANDO OS OBJETOS DISTINTOS EXISTENTES NO BD
FROM ALL_OBJECTS;

-- VERIFICAR OS OBJETOS EXISTENTES A PARTIR DE UM FILTRO COM PALAVRAS DE INTERESSE
SELECT OBJECT_NAME
FROM ALL_OBJECTS
WHERE OBJECT_TYPE='VIEW';  -- OS DADOS ARMAZENADOS NO BD S�O SENS�VEIS A MAIUSCULAS/MIN�SCULAS

-- BUSCANDO INFORMA��ES SOBRE TABELAS NO CAT�LOGO (DD)
SELECT OBJECT_NAME
FROM ALL_OBJECTS
WHERE OBJECT_TYPE='VIEW'
  AND OBJECT_NAME LIKE '%TABLE%'; -- BUSCANDO AS VIEWS COM INFORMA��ES RELACIONADAS A TABELAS
                                  -- OS METATACARATERES S�O % E O _ (UNDERLINE)
                                  -- % SUBSTITUI UMA CADEIA DE CARACTERES
                                  -- _ SUBSTITUI UMA A POSI��O DE UM CARACTER
                                  
-- BUSCANDO INFORMA��ES RELACIONADAS A COLUNAS DE TABELAS NO CAT�LOGO (DD)
SELECT OBJECT_NAME
FROM ALL_OBJECTS
WHERE OBJECT_TYPE='VIEW'
  AND (OBJECT_NAME LIKE '_____TAB%COL%'
   OR OBJECT_NAME LIKE 'U%TAB%COL%');
  
-- BUSCANDO OS DADOS DE UMA VIEW RELACIONADAS �S TABELAS E COLUNAS
SELECT COUNT(*)  -- TODAS AS COLUNAS QUE O USU�RIO LOGADO PODE VER
FROM USER_TAB_COLUMNS;

-- CRIANDO TABELAS E REGRAS
DROP TABLE TA1 CASCADE CONSTRAINT; -- ELIMINANDO A TABELA TA1

CREATE TABLE TA1
(
C1      NUMBER ,
C2      CHAR,
C3      VARCHAR2(100)
);

CREATE TABLE TA1
(
C1      NUMBER CONSTRAINT PK_TA1 PRIMARY KEY,
C2      CHAR NOT NULL,
C3      VARCHAR2(100)
);

--RECRIANDO A TABELA TA1
CREATE TABLE TA1
(
C1      NUMBER , --CONSTRAINT PK_TA1 PRIMARY KEY,
C2      CHAR         NOT      NULL       ,
C3      VARCHAR2(100),
CONSTRAINT PK_TA1 PRIMARY KEY (C1,C2),
CONSTRAINT CK_TA1_C1 CHECK (C1 > 0)
);

-- ALTERANDO A ESTRUTURA DE TABELA
ALTER TABLE TA1
ADD CONSTRAINT PK_TA1 PRIMARY KEY (C1)
ADD CONSTRAINT CK_TA1_C1 CHECK (C1 > 0)
MODIFY C2 NOT NULL
MODIFY C3 VARCHAR2(80);

ALTER TABLE TA1
DROP COLUMN C2;

-- CRIANDO A TABLE TA2
DROP TABLE TA2;

CREATE TABLE TA2
(
COL        NUMBER(2) CONSTRAINT PK_TA2 PRIMARY KEY,
COL_C1     NUMBER --,
-- CONSTRAINT FK_TA2_TA1 FOREIGN KEY (COL_C1) REFERENCES TA1 (C1)
);

-- INCLUINDO A CONSTRAINT (REGRA) DE FK (CHAVE ESTRANGEIRA) EM TA2 REFERENCIANDO TA1
ALTER TABLE TA2
ADD CONSTRAINT FK_TA2_TA1 FOREIGN KEY (COL_C1) REFERENCES TA1 (C1);

-- INCLUINDO DADOS EM TA2
INSERT INTO TA2 VALUES (1,NULL);
INSERT INTO TA2 VALUES (2,1);

SELECT *
FROM TA2;

-- VERIFICANDO A TABELA CRIADA NO DD (DICION�RIO DE DADOS / CAT�LOGO)
DESC TA1; -- DESCREVE A ESTRUTURA DA TABELA/VIEW

DESC TA2;

SELECT *
FROM USER_TABLES
WHERE TABLE_NAME IN ('TA1','TA2');--TABLE_NAME='TA1';

-- VERIFICANDO AS COLUNAS DA TABELA/VIEW
SELECT *
FROM USER_TAB_COLUMNS
WHERE TABLE_NAME IN ('TA1','TA2');--TABLE_NAME='TA1';

-- VERIFICANDO AS REGRAS (CONSTRAINTS) TABELA/VIEW
SELECT *
FROM USER_CONSTRAINTS
WHERE TABLE_NAME IN ('TA1','TA2');--TABLE_NAME='TA1';

-- VERIFICANDO AS REGRAS (CONSTRAINTS) APLICADAS EM QUAL COLUNA DA TABELA/VIEW
SELECT *
FROM USER_CONS_COLUMNS
WHERE TABLE_NAME IN ('TA1','TA2');--TABLE_NAME='TA1';

-- VERIFICANDO �NDICES DA TABELA/VIEW
SELECT *
FROM USER_INDEXES
WHERE TABLE_NAME IN ('TA1','TA2');--TABLE_NAME='TA1';

-- VERIFICANDO AS COLUNAS DE �NDICES DA TABELA/VIEW
SELECT *
FROM USER_IND_COLUMNS
WHERE TABLE_NAME IN ('TA1','TA2');--TABLE_NAME='TA1';

-- PARTE SOLU��O DA ATIVIDADE DE CRIA��O DO PROJETO PEDIDO
-- TABELA CLIENTE
DROP TABLE CLIENTE CASCADE CONSTRAINT;

CREATE TABLE CLIENTE
(
CODIGO          NUMBER CONSTRAINT PK_CLIENTE PRIMARY KEY,
NOME            VARCHAR2(60) NOT NULL,
RUA             VARCHAR2(80) NOT NULL,
NR              NUMBER(4) NOT NULL,
BAIRRO          VARCHAR2(50) NOT NULL,
COMPLEMENTO     VARCHAR2(100) NULL,
CIDADE          VARCHAR2(50) NOT NULL,
UF              VARCHAR2(2) NOT NULL,
CEP             VARCHAR2(10) NOT NULL
);

-- TABELA FONE_CLIENTE
DROP TABLE FONE_CLIENTE CASCADE CONSTRAINT;

CREATE TABLE FONE_CLIENTE
(
NUMERO          VARCHAR2(14),
CODIGO_CLI      NUMBER,
CONSTRAINT PK_FONE_CLIENTE PRIMARY KEY (NUMERO,CODIGO_CLI)
);

ALTER TABLE FONE_CLIENTE
ADD CONSTRAINT FK_FONE_CLIENTE FOREIGN KEY (CODIGO_CLI) REFERENCES CLIENTE (CODIGO);

-- CRIANDO INDICES
DESC TA1;

DROP INDEX IND_TA1_C1_C2;

CREATE INDEX IND_TA1_C1_C2 ON TA1 (C2 ASC,C3 DESC);

SELECT *
FROM USER_IND_COLUMNS
WHERE TABLE_NAME IN ('TA1','TA2');

-- CRIANDO SEQUENCES
DROP SEQUENCE SEQ_TA1;

CREATE SEQUENCE SEQ_TA1;  -- COM VALORES DEFAULT

CREATE SEQUENCE SEQ_TA1 INCREMENT BY 2 MINVALUE 1 MAXVALUE 100;

CREATE SEQUENCE SEQ_TA1 CYCLE INCREMENT BY 10 MINVALUE 1 MAXVALUE 100 CACHE 8 START WITH 50;

-- ARGUMENTOS QUE PODEM SER UTILIZADOS NA ESTRUTURA DE CRIA��O DA SEQUENCE
-- MINVALUE, MAXVALUE, INCREMENT BY, START WITH, NOCYCLE/CYCLE, NOORDER/ORDER, CACHE

-- VISUALIZANDO A SEQUENCE NO DD
SELECT *
FROM USER_SEQUENCES
WHERE SEQUENCE_NAME='SEQ_TA1';

SELECT LENGTH(MAX_VALUE)  -- CONTAR A QUANTIDADE DE ALGARISMOS NO CAMPO MAX_VALUE
FROM USER_SEQUENCES
WHERE SEQUENCE_NAME='SEQ_TA1';

-- UTILIZANDO A SEQUENCE CRIADA (NEXTVAL OU CURRVAL)
SELECT SEQ_TA1.NEXTVAl
FROM DUAL;

SELECT SEQ_TA1.CURRVAl
FROM DUAL;

DESC TA1;

SELECT *
FROM TA1;

INSERT INTO TA1
SELECT SEQ_TA1.NEXTVAl,
       SUBSTR(FIRST_NAME,1,1),
       FIRST_NAME ||' '|| LAST_NAME
FROM EMP;

-- INCLUINDO E CONSULTANDO COMENT�RIOS DE TABELAS E COLUNAS NO DD
-- EM TABELAS
COMMENT ON TABLE TA1 IS 'Informa��es sobre a tabela TA1 utilizada para exemplifica��es de comandos SQL.';

-- CONSULTANDO O COMENT�RIO CRIADO PARA A TABELA
SELECT *
FROM USER_TAB_COMMENTS
WHERE TABLE_NAME='TA1';

-- EM COLUNAS
COMMENT ON COLUMN TA1.C1 IS 'Informa��es sobre a COLUNA C1 da tabela TA1 utilizada para exemplifica��es de comandos SQL.';
COMMENT ON COLUMN TA1.C2 IS 'Informa��es sobre a COLUNA C2 da tabela TA1 utilizada para exemplifica��es de comandos SQL.';
COMMENT ON COLUMN TA1.C3 IS '';

-- CONSULTANDO O COMENT�RIO CRIADO PARA A TABELA
SELECT *
FROM USER_COL_COMMENTS
WHERE TABLE_NAME='TA1';

-- INSERINDO DADOS NO BD
-- INSERINDO VALORES LINHA A LINHA (REGISTRO POR REGISTRO)
INSERT INTO nome_tabela_view (nome das colunas) VALUES (valores coorespondentes �s colunas, separados por v�rgula);

DELETE FROM TA1;

SELECT *
FROM TA1;

DESC TA1;

INSERT INTO TA1 VALUES (1,'a','TESTE'); -- INSER��O N�O INFORMANDO AS COLUNAS QUE RECEBER�O DADOS
INSERT INTO TA1 (C1,C2) VALUES (2,'a'); -- INFORMANDO AS COLUNAS QUE RECEBER�O DADOS
INSERT INTO TA1  VALUES (3,'a',NULL); -- NULL = ''
INSERT INTO TA1 (C3,C1,C2) VALUES ('Teste',4,'b'); -- OS DADOS DEVEM ESTAR NA ORDEM DAS COLUNAS
INSERT INTO TA1 (C1,C3) VALUES (5,'Tst'); -- RESTRI��O DE N�O NULO � APLICADA MESMO A COLUNA N�O SENDO INFORMADA

-- INSER��ES DE M�LTIPLAS LINHAS (REGISTROS) NA TABELA_VIEW
INSERT INTO TA1 -- PODE SER INFORMADAS AS COLUNAS. SE N�O INFORMAR, CONSIDERA TODAS
SELECT ID,
       SUBSTR(LAST_NAME,LENGTH(LAST_NAME),1) AS C2,
       LAST_NAME
FROM EMP
WHERE ID > 4;

-- DESFAZENDO AS ALTERA��ES DA TRANSA��O
ROLLBACK;

-- CONFIRMANDO AS ALTERA��ES DA TRANSA��O NO BD
COMMIT;

-- REALIZANDO CONTROLES PARCIAIS DA TRANSA��O. PERMITINDO DEESFAZER PARTE DAS ALTERA��ES
SAVEPOINT PONTO_CONTROLE;

/*
1) Copiar os dados do projeto pedido cujo o owner seja o DEMO. Todas as tabelas do
usu�rio DEMO est�o compartilhadas para leitura, exceto ITEM_PRODUTO.
*/
-- DADOS DA TABELA CLIENTE

INSERT INTO CLIENTE
SELECT *
FROM DEMO.CLIENTE;

-- DADOS DA TABELA FONE_CLIENTE

INSERT INTO FONE_CLIENTE
SELECT *
FROM DEMO.FONE_CLIENTE;

COMMIT;

SELECT *
FROM CLIENTE;

-- 1. Produto 207 para todos os pedidos pares e ano menor 2018, com a quantidade 100 e
-- pre�o unitário R$ 10.00
-- RESOLU��O:

DESC ITEM_PRODUTO;

INSERT INTO ITEM_PRODUTO (CODIGO_PRO,QUANTIDADE,NUMERO_PED,PRECO_UNITARIO)
SELECT 207,
       100,
       NUMERO,
       10.00
FROM PEDIDO
WHERE MOD(NUMERO,2)=0
  AND TO_CHAR(DATA,'YYYY') < 2018;
  
SELECT *
FROM ITEM_PRODUTO;

-- TRABALHANDO COM JUNÇÕES DE TABELAS 

SELECT A.NUMERO,
       A.DATA,
       A.CODIGO_CLI AS CODIGO,
--       B.CODIGO,
       B.NOME AS CLIENTE,
       A.MATRICULA_VEN,
       VENDEDOR.NOME AS VENDEDOR
FROM (PEDIDO A INNER JOIN
     CLIENTE B ON A.CODIGO_CLI=B.CODIGO) JOIN
     VENDEDOR ON VENDEDOR.MATRICULA=A.MATRICULA_VEN;
     
     
SELECT A.NUMERO,
       A.DATA,
       A.CODIGO,
--       B.CODIGO,
       B.NOME AS CLIENTE,
       A.MATRICULA_VEN,
       VENDEDOR.NOME AS VENDEDOR
FROM (
        SELECT NUMERO,
               DATA,
               CODIGO_CLI AS CODIGO,
               MATRICULA_VEN
         FROM PEDIDO
      ) A INNER JOIN
     CLIENTE B ON A.CODIGO=B.CODIGO JOIN
     VENDEDOR ON VENDEDOR.MATRICULA=A.MATRICULA_VEN;     

-- ALTERANDO CAMPOS DE LINHAS DE TABELAS NO BD
SELECT * 
FROM TA1;

UPDATE TA1 SET C2='C',C3='EXEMPLO ALTERAÇÃO DE CAMPOS'
WHERE C1=2;

UPDATE TA1 T SET C3=(SELECT E.FIRST_NAME
                   FROM EMP E
                   WHERE T.C1=E.ID);

DESC TA2;
ROLLBACK;

SELECT *
FROM EMP;
-- JUNÇÕES DE TABELAS
SELECT A.NUMERO,
       A.DATA,
--       A.CODIGO_CLI,
       B.NOME AS CLIENTE,
       A.MATRICULA_VEN,
       V.NOME AS VENDEDOR
FROM (PEDIDO A INNER JOIN
     CLIENTE B ON A.CODIGO_CLI=B.CODIGO) JOIN
     VENDEDOR V ON A.MATRICULA_VEN=V.MATRICULA
     ;
     
SELECT A.NUMERO,
       A.DATA,
--       A.CODIGO,
       B.NOME AS CLIENTE,
       A.MATRICULA_VEN,
       V.NOME AS VENDEDOR
FROM (SELECT NUMERO,
             DATA,
             CODIGO_CLI AS CODIGO,
             MATRICULA_VEN
      FROM PEDIDO) A INNER JOIN
     CLIENTE B ON A.CODIGO=B.CODIGO JOIN
     VENDEDOR V ON A.MATRICULA_VEN=V.MATRICULA
     ;
     
-- TRABALHANDO COM FUNÇÕES DE GRUPO
-- FUNÇÕES: SUM, AVG, COUNT, MIN, MAX
SELECT DATA,
       SUM(NUMERO) AS SOMATORIO,
       AVG(NUMERO) AS MEDIA,
       MIN(NUMERO) AS MENOR_VALOR,
       MAX(NUMERO) AS MAIOR_VALOR,
       COUNT(NUMERO) AS QUANTIDADE
FROM PEDIDO
WHERE NUMERO BETWEEN 10 AND 50
GROUP BY DATA
HAVING COUNT(NUMERO) > 1
ORDER BY DATA DESC;

SELECT DATA,
       SUM(NUMERO) AS SOMATORIO,
       AVG(NUMERO) AS MEDIA,
       MIN(NUMERO) AS MENOR_VALOR,
       MAX(NUMERO) AS MAIOR_VALOR,
       COUNT(NUMERO) AS QUANTIDADE
FROM PEDIDO
WHERE NUMERO BETWEEN 10 AND 50
GROUP BY DATA
HAVING COUNT(NUMERO) > (SELECT MIN(QDE)
                        FROM (SELECT COUNT(NUMERO) QDE
                              FROM PEDIDO
                              GROUP BY DATA)
                        )
ORDER BY DATA DESC;

-- CRIANDO VIEWS
DROP VIEW VIEW_PED_CLI_PJ;

CREATE OR REPLACE VIEW VIEW_PED_CLI_PJ
AS
SELECT A.NUMERO,
       A.DATA,
       B.NOME AS CLIENTE,
       PJ.CNPJ,
       A.TOTAL_FATURA
FROM (PEDIDO A INNER JOIN
     CLIENTE B ON A.CODIGO_CLI=B.CODIGO) JOIN
     PJ ON PJ.CODIGO_CLI=B.CODIGO;
     
SELECT *
FROM VIEW_PED_CLI_PJ
WHERE NUMERO > 45;

SELECT *
FROM USER_VIEWS
WHERE VIEW_NAME='VIEW_PED_CLI_PJ';

DESC VIEW_PED_CLI_PJ;

"SELECT A.NUMERO,
       A.DATA,
       B.NOME AS CLIENTE,
       A.TOTAL_FATURA
FROM (PEDIDO A INNER JOIN
     CLIENTE B ON A.CODIGO_CLI=B.CODIGO) JOIN
     PJ ON PJ.CODIGO_CLI=B.CODIGO"